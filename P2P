/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/netanim-module.h"
// Default Network Topology
//
//       10.1.1.0
// n0 -------------- n1
//    point-to-point
//
 
using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("FirstScriptExample");
int
main (int argc, char *argv[])
{
  CommandLine cmd (__FILE__);
  cmd.Parse (argc, argv);
  
  Time::SetResolution (Time::NS);
  LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
  LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);

  NodeContainer nodes;
  nodes.Create (5);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  NetDeviceContainer devices;
  devices = pointToPoint.Install (nodes.Get(0), nodes.Get(1));
    NetDeviceContainer devices2;
    devices2 = pointToPoint.Install (nodes.Get(0), nodes.Get(2));
    NetDeviceContainer devices3;
    devices3 = pointToPoint.Install (nodes.Get(0), nodes.Get(3));
    NetDeviceContainer devices4;
        devices4 = pointToPoint.Install (nodes.Get(0), nodes.Get(4));
        NetDeviceContainer devices5;
        devices5 = pointToPoint.Install (nodes.Get(1), nodes.Get(0));
        NetDeviceContainer devices6;
        devices6 = pointToPoint.Install (nodes.Get(1), nodes.Get(2));
        NetDeviceContainer devices7;
        devices7 = pointToPoint.Install (nodes.Get(1), nodes.Get(3));
        NetDeviceContainer devices8;
        devices8 = pointToPoint.Install (nodes.Get(1), nodes.Get(4));
        NetDeviceContainer devices9;
        devices9 = pointToPoint.Install (nodes.Get(2), nodes.Get(0));
        NetDeviceContainer devices10;
        devices10 = pointToPoint.Install (nodes.Get(2), nodes.Get(1));
        NetDeviceContainer devices11;
        devices11 = pointToPoint.Install (nodes.Get(2), nodes.Get(3));
        NetDeviceContainer devices12;
        devices12 = pointToPoint.Install (nodes.Get(2), nodes.Get(4));
        NetDeviceContainer devices13;
        devices13 = pointToPoint.Install (nodes.Get(3), nodes.Get(0));
        NetDeviceContainer devices14;
        devices14 = pointToPoint.Install (nodes.Get(3), nodes.Get(1));
        NetDeviceContainer devices15;
        devices15 = pointToPoint.Install (nodes.Get(3), nodes.Get(2));
        NetDeviceContainer devices16;
        devices16 = pointToPoint.Install (nodes.Get(3), nodes.Get(4));
        NetDeviceContainer devices17;
        
        devices17 = pointToPoint.Install (nodes.Get(4), nodes.Get(0));
        NetDeviceContainer devices18;
        devices18 = pointToPoint.Install (nodes.Get(4), nodes.Get(1));
        NetDeviceContainer devices19;
        devices19 = pointToPoint.Install (nodes.Get(4), nodes.Get(2));
        NetDeviceContainer devices20;
        devices20 = pointToPoint.Install (nodes.Get(4), nodes.Get(3));
        
        
        

  InternetStackHelper stack;
  stack.Install (nodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");

  Ipv4InterfaceContainer interfaces = address.Assign (devices);
    //Ipv4InterfaceContainer interfaces1 = address.Assign (devices);
    Ipv4InterfaceContainer interfaces2 = address.Assign (devices2);
    Ipv4InterfaceContainer interfaces3 = address.Assign (devices3);
    Ipv4InterfaceContainer interfaces4 = address.Assign (devices4);
    Ipv4InterfaceContainer interfaces5 = address.Assign (devices5);
    Ipv4InterfaceContainer interfaces6 = address.Assign (devices6);
    Ipv4InterfaceContainer interfaces7 = address.Assign (devices7);
    Ipv4InterfaceContainer interfaces8 = address.Assign (devices8);
    Ipv4InterfaceContainer interfaces9 = address.Assign (devices9);
    Ipv4InterfaceContainer interfaces10 = address.Assign (devices10);
    Ipv4InterfaceContainer interfaces11 = address.Assign (devices11);
    Ipv4InterfaceContainer interfaces12 = address.Assign (devices12);
    Ipv4InterfaceContainer interfaces13 = address.Assign (devices13);
    Ipv4InterfaceContainer interfaces14 = address.Assign (devices14);
    Ipv4InterfaceContainer interfaces15 = address.Assign (devices15);
    Ipv4InterfaceContainer interfaces16 = address.Assign (devices16);
    Ipv4InterfaceContainer interfaces17 = address.Assign (devices17);
    Ipv4InterfaceContainer interfaces18 = address.Assign (devices18);
    Ipv4InterfaceContainer interfaces19 = address.Assign (devices19);
    Ipv4InterfaceContainer interfaces20 = address.Assign (devices20);
  //UdpEchoServerHelper echoServer (9);
    //UdpEchoServerHelper echoServer1 (19);
    
    
    


  UdpEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (3));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (5.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024*20));
    
    UdpEchoClientHelper echoClient1 (interfaces.GetAddress (1), 19);
    echoClient1.SetAttribute ("MaxPackets", UintegerValue (4));
    echoClient1.SetAttribute ("Interval", TimeValue (Seconds (5.0)));
    echoClient1.SetAttribute ("PacketSize", UintegerValue (1024*20));

    UdpEchoClientHelper echoClient2 (interfaces.GetAddress (1), 29);
    echoClient2.SetAttribute ("MaxPackets", UintegerValue (5));
    echoClient2.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
    echoClient2.SetAttribute ("PacketSize", UintegerValue (1024*20));
    
    UdpEchoClientHelper echoClient3 (interfaces.GetAddress (1), 39);
    echoClient3.SetAttribute ("MaxPackets", UintegerValue (6));
    echoClient3.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
    echoClient3.SetAttribute ("PacketSize", UintegerValue (1024*20));
    
    UdpEchoClientHelper echoClient4 (interfaces.GetAddress (1), 49);
    echoClient4.SetAttribute ("MaxPackets", UintegerValue (7));
    echoClient4.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
    echoClient4.SetAttribute ("PacketSize", UintegerValue (1024*20));
    
    

  ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
  clientApps.Start (Seconds (5.0));
  clientApps.Stop (Seconds (10.0));
    
    ApplicationContainer clientApps1 = echoClient1.Install (nodes.Get (1));
    clientApps1.Start (Seconds (5.0));
    clientApps1.Stop (Seconds (10.0));
    
    
    ApplicationContainer clientApps2 = echoClient2.Install (nodes.Get (2));
    clientApps2.Start (Seconds (5.0));
    clientApps2.Stop (Seconds (10.0));
    
    ApplicationContainer clientApps3 = echoClient3.Install (nodes.Get (3));
    clientApps3.Start (Seconds (5.0));
    clientApps3.Stop (Seconds (10.0));
    
    ApplicationContainer clientApps4 = echoClient4.Install (nodes.Get (4));
    clientApps4.Start (Seconds (5.0));
    clientApps4.Stop (Seconds (10.0));
      
    
    
    

  AnimationInterface anim ("anim1.xml");
    
    anim.SetConstantPosition(nodes.Get(0),10.0,10.0);
    anim.SetConstantPosition(nodes.Get(1),10.0,30.0);
    anim.SetConstantPosition(nodes.Get(2),50.0,50.0);
    anim.SetConstantPosition(nodes.Get(3),80.0,30.0);
    anim.SetConstantPosition(nodes.Get(4),70.0,10.0);


  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}

